# --------------------------------------------------------
# Fast R-CNN
# Copyright (c) 2015 Microsoft
# Licensed under The MIT License [see LICENSE for details]
# Written by Ross Girshick
# --------------------------------------------------------

import datasets
import PIL
import datasets.mydb
import os
import datasets.imdb
import xml.dom.minidom as minidom
import numpy as np
import scipy.sparse
import scipy.io as sio
import utils.cython_bbox
import cPickle
import subprocess
import re

class mydb(datasets.imdb):
    def __init__(self, image_set, devkit_path=None):
        datasets.imdb.__init__(self, 'my_' + image_set)
        self._year = '2015'
        self._image_set = image_set  # trainval
        self._devkit_path = self._get_default_path() if devkit_path is None \
            else devkit_path  # root_path
        self._data_path = os.path.join(self._devkit_path, 'Images')
        self._classes = ('__background__',  # always index 0
                         'target')
  
        self._class_to_ind = dict(zip(self.classes, xrange(self.num_classes)))
        print dict(zip(self.classes, xrange(self.num_classes)))
        self._image_ext = '.png'##########
        self._image_index = self._load_image_set_index()
        print self._image_index
        # Default to roidb handler
        self._roidb_handler = self.selective_search_roidb

        # PASCAL specific config options
        self.config = {'cleanup': True,
                       'use_salt': True,
                       'top_k': 2000}

        assert os.path.exists(self._devkit_path), \
            'VOCdevkit path does not exist: {}'.format(self._devkit_path)
        assert os.path.exists(self._data_path), \
            'Path does not exist: {}'.format(self._data_path)

    def image_path_at(self, i):
        """
        Return the absolute path to image i in the image sequence.
        """
        return self.image_path_from_index(self._image_index[i])

    def image_path_from_index(self, index):
        """
        Construct an image path from the image's "index" identifier.
        """
        image_path = os.path.join(self._data_path,
                                  index + self._image_ext)
        assert os.path.exists(image_path), \
            'Path does not exist: {}'.format(image_path)
        return image_path

    def _load_image_set_index(self):
        """
        Load the indexes listed in this dataset's image set file.
        """
        # Example path to image set file:
        # self._devkit_path + /VOCdevkit2007/VOC2007/ImageSets/Main/val.txt
        image_set_file = os.path.join(self._devkit_path,
                                      self._image_set + '.txt')
        assert os.path.exists(image_set_file), \
            'Path does not exist: {}'.format(image_set_file)
        with open(image_set_file) as f:
            image_index = [x.strip() for x in f.readlines()]
        return image_index

    def _get_default_path(self):
        """
        Return the default path where PASCAL VOC is expected to be installed.
        """
        return os.path.join(datasets.ROOT_DIR, 'data', 'xcMYdevkit')###########################

    def gt_roidb(self):
        """
        Return the database of ground-truth regions of interest.lzdata

        This function loads/saves from/to a cache file to speed up future calls.
        """
        cache_file = os.path.join(self.cache_path, self.name + '_gt_roidb.pkl')
        if os.path.exists(cache_file):
            with open(cache_file, 'rb') as fid:
                roidb = cPickle.load(fid)
            print '{} gt roidb loaded from {}'.format(self.name, cache_file)
            return roidb

        gt_roidb = [self._load_my_annotation_4cls(index)
                    for index in self.image_index] 
        """
        with open(cache_file, 'wb') as fid:
            cPickle.dump(gt_roidb, fid, cPickle.HIGHEST_PROTOCOL)
        """
        print 'wrote gt roidb to {}'.format(cache_file)

        return gt_roidb

    def selective_search_roidb(self):
        """
        Return the database of selective search regions of interest.
        Ground-truth ROIs are also included.

        This function loads/saves from/to a cache file to speed up future calls.
        """
        cache_file = os.path.join(self.cache_path,
                                  self.name + '_selective_search_roidb.pkl')

        if os.path.exists(cache_file):
            with open(cache_file, 'rb') as fid:
                roidb = cPickle.load(fid)
            print '{} ss roidb loaded from {}'.format(self.name, cache_file)
            return roidb

        if self._image_set != 'test':
            gt_roidb = self.gt_roidb()
            ss_roidb = self._load_selective_search_roidb(gt_roidb)
            roidb = datasets.imdb.merge_roidbs(gt_roidb, ss_roidb)
        else:
            roidb = self._load_selective_search_roidb(None)
        """
        with open(cache_file, 'wb') as fid:
            cPickle.dump(roidb, fid, cPickle.HIGHEST_PROTOCOL)
        """
        print 'wrote ss roidb to {}'.format(cache_file)

        return roidb

    def _load_selective_search_roidb(self, gt_roidb):
        filename = os.path.abspath(os.path.join(self._devkit_path,
                                                self._image_set + '.mat'))
        assert os.path.exists(filename), \
            'Selective search data not found at: {}'.format(filename)
        raw_data = sio.loadmat(filename)['bboxes'].ravel()

        box_list = []
        for i in xrange(raw_data.shape[0]):
            box_list.append(raw_data[i][:, (1, 0, 3, 2)] - 1)

        return self.create_roidb_from_box_list(box_list, gt_roidb)

    def selective_search_IJCV_roidb(self):
        """
        Return the database of selective search regions of interest.
        Ground-truth ROIs are also included.

        This function loads/saves from/to a cache file to speed up future calls.
        """
        cache_file = os.path.join(self.cache_path,
                                  '{:s}_selective_search_IJCV_top_{:d}_roidb.pkl'.
                                  format(self.name, self.config['top_k']))

        if os.path.exists(cache_file):
            with open(cache_file, 'rb') as fid:
                roidb = cPickle.load(fid)
            print '{} ss roidb loaded from {}'.format(self.name, cache_file)
            return roidb

        gt_roidb = self.gt_roidb()
        ss_roidb = self._load_selective_search_IJCV_roidb(gt_roidb)
        roidb = datasets.imdb.merge_roidbs(gt_roidb, ss_roidb)
        with open(cache_file, 'wb') as fid:
            cPickle.dump(roidb, fid, cPickle.HIGHEST_PROTOCOL)
        print 'wrote ss roidb to {}'.format(cache_file)

        return roidb

    def _load_selective_search_IJCV_roidb(self, gt_roidb):
        IJCV_path = os.path.abspath(os.path.join(self.cache_path, '..',
                                                 'selective_search_IJCV_data',
                                                 'voc_' + self._year))
        assert os.path.exists(IJCV_path), \
            'Selective search IJCV data not found at: {}'.format(IJCV_path)

        top_k = self.config['top_k']
        box_list = []
        for i in xrange(self.num_images):
            filename = os.path.join(IJCV_path, self.image_index[i] + '.mat')
            raw_data = sio.loadmat(filename)
            box_list.append((raw_data['boxes'][:top_k, :] - 1).astype(np.uint16))

        return self.create_roidb_from_box_list(box_list, gt_roidb)


    def _load_my_annotation_4cls(self, index):
        filename = os.path.join(self._devkit_path, 'Annotations', index + '.png.txt')  ##############
        with open(filename) as f:
            txts = [x.strip() for x in f.readlines()]

        num_objs = int(txts[0])
        boxes = np.zeros((num_objs, 4), dtype=np.uint16)
        gt_classes = np.zeros((num_objs), dtype=np.int32)
        overlaps = np.zeros((num_objs, self.num_classes), dtype=np.float32)
	print filename#######
        if num_objs == 0:	    
            boxes[0, :] = np.ones(4, dtype=np.int32) - 1
            gt_classes[0] = 0
            overlaps[0, 0] = 1.0#??????????????
        else:
            for anno_ix in range(0, num_objs):
                if txts[anno_ix*3 + 2] == ',':
                    cls = 1
                else:
                    cls = int(txts[anno_ix*3 + 2])
                # elif cls == 4:
                #     is_label = 1
                #     box_ix = 0
                #     cls = 2
                # box_ix = anno_ix
                anno = (re.split('[ ]',txts[anno_ix*3 + 1]))
                #anno = (re.split('[ ]',txts[ix*3]))

		#INRIA/ETH use the annoatations of [y1 x1 y2 x2],
		#so we use blow!!!

                x1 = float(anno[1])
                y1 = float(anno[0])
                x2 = float(anno[3])
                y2 = float(anno[2])


                #Check anno
                if x1 > x2:
                    x1,x2 = x2,x1
                    print(1)
                if y1 > y2:
                    y1,y2 = y2,y1
                    print(2)
                imgpath = os.path.join(self._devkit_path, 'Images', index + '.png')
                #print(imgpath)
                w = PIL.Image.open(imgpath).size[0]
                h = PIL.Image.open(imgpath).size[1]
                if x2 > w:
                    print 'x2>w : ',x2,w
                    print(imgpath)
                    x2 = w
                if y2 > h:
                    print 'y2>h : ',y2,h
                    print(imgpath)
                    y2 = h
                box_ix = anno_ix
                boxes[box_ix, :] = [x1, y1, x2, y2]
                gt_classes[box_ix] = cls
                overlaps[box_ix, cls] = 1.0
        overlaps = scipy.sparse.csr_matrix(overlaps)

        return {'boxes': boxes,
                'gt_classes': gt_classes,
                'gt_overlaps': overlaps,
                'flipped': False}
    def _load_my_annotation_14cls(self, index):
        filename = os.path.join(self._devkit_path, 'Annotations', index + '.png.txt')
        with open(filename) as f:
            txts = [x.strip() for x in f.readlines()]

        num_objs = int(txts[0])
        boxes = np.zeros((num_objs, 4), dtype=np.uint16)
        gt_classes = np.zeros((num_objs), dtype=np.int32)
        overlaps = np.zeros((num_objs, self.num_classes), dtype=np.float32)

        if num_objs == 0:
            boxes[0, :] = np.ones(4, dtype=np.int32) - 1
            gt_classes[0] = 0
            overlaps[0, 0] = 1.0#??????????????
        else:
            for anno_ix in range(0, num_objs):
                if txts[anno_ix*3 + 2] == ',':
                    cls = 1
                else:
                    cls = int(txts[anno_ix*3 + 2])
                # elif cls == 4:
                #     is_label = 1
                #     box_ix = 0
                #     cls = 2
                # box_ix = anno_ix
                anno = (re.split('[ ]',txts[anno_ix*3 + 1]))
                #anno = (re.split('[ ]',txts[ix*3]))
                x1 = float(anno[1])
                y1 = float(anno[0])
                x2 = float(anno[3])
                y2 = float(anno[2])

                # x1 = float(anno[0])
                # y1 = float(anno[1])
                # x2 = float(anno[2])
                # y2 = float(anno[3])
                #Check anno
                if x1 > x2:
                    x1,x2 = x2,x1
                    print(1)
                if y1 > y2:
                    y1,y2 = y2,y1
                    print(2)
                imgpath = os.path.join(self._devkit_path, 'Images', index + '.png')
                #print(imgpath)
                w = PIL.Image.open(imgpath).size[0]
                h = PIL.Image.open(imgpath).size[1]
                if x2 > w:
                    print 'x2>w : ',x2,w
                    print(imgpath)
                    x2 = w
                if y2 > h:
                    print 'y2>h : ',y2,h
                    print(imgpath)
                    y2 = h
                box_ix = anno_ix
                boxes[box_ix, :] = [x1, y1, x2, y2]
                gt_classes[box_ix] = cls
                overlaps[box_ix, cls] = 1.0
        overlaps = scipy.sparse.csr_matrix(overlaps)

        return {'boxes': boxes,
                'gt_classes': gt_classes,
                'gt_overlaps': overlaps,
                'flipped': False}
    def _load_my_annotation_1line(self, index):
        """
        Load image and bounding boxes info from XML file in the PASCAL VOC
        format.
        """
        filename = os.path.join(self._devkit_path, 'Annotations', index + '.png.txt')
        # print 'Loading: {}'.format(filename)
        with open(filename) as f:
            txts = [x.strip() for x in f.readlines()]
        num_objs = 1
        cls = 1
        boxes = np.zeros((num_objs, 4), dtype=np.uint16)
        gt_classes = np.zeros((num_objs), dtype=np.int32)
        overlaps = np.zeros((num_objs, self.num_classes), dtype=np.float32)

        anno = (re.split('[ ]',txts[0]))
        x1 = float(anno[0])
        y1 = float(anno[1])
        w = float(anno[2])
        h = float(anno[3])
        x2 = x1 + w
        y2 = y1 + h
        if x1 > x2:
            x1,x2 = x2,x1
            print(1)
        if y1 > y2:
            y1,y2 = y2,y1
            print(2)
        imgpath = os.path.join(self._devkit_path, 'Images', index + '.png')
                #print(imgpath)
        w = PIL.Image.open(imgpath).size[0]
        h = PIL.Image.open(imgpath).size[1]
        if x2 > w:
            print 'x2>w : ',x2,w
            print(imgpath)
            x2 = w
        if y2 > h:
            print 'y2>h : ',y2,h
            print(imgpath)
            y2 = h

        boxes[0, :] = [x1, y1, x2, y2]
        gt_classes[0] = cls
        overlaps[0, cls] = 1.0
        overlaps = scipy.sparse.csr_matrix(overlaps)

        return {'boxes': boxes,
                'gt_classes': gt_classes,
                'gt_overlaps': overlaps,
                'flipped': False}


    def _write_voc_results_file(self, all_boxes):#todo
        use_salt = self.config['use_salt']
        comp_id = 'comp4'
        if use_salt:
            comp_id += '-{}'.format(os.getpid())

        # VOCdevkit/results/VOC2007/Main/comp4-44503_det_test_aeroplane.txt
        path = os.path.join(self._devkit_path, 'results', 'VOC' + self._year,
                            'Main', comp_id + '_')
        for cls_ind, cls in enumerate(self.classes):
            if cls == '__background__':
                continue
            print 'Writing {} VOC results file'.format(cls)
            filename = path + 'det_' + self._image_set + '_' + cls + '.txt'
            with open(filename, 'wt') as f:
                for im_ind, index in enumerate(self.image_index):
                    dets = all_boxes[cls_ind][im_ind]
                    if dets == []:
                        continue
                    # the VOCdevkit expects 1-based indices
                    for k in xrange(dets.shape[0]):
                        f.write('{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\n'.
                                format(index, dets[k, -1],
                                       dets[k, 0] + 1, dets[k, 1] + 1,
                                       dets[k, 2] + 1, dets[k, 3] + 1))
        return comp_id

    def _do_matlab_eval(self, comp_id, output_dir='output'):
        rm_results = self.config['cleanup']

        path = os.path.join(os.path.dirname(__file__),
                            'VOCdevkit-matlab-wrapper')
        cmd = 'cd {} && '.format(path)
        cmd += '{:s} -nodisplay -nodesktop '.format(datasets.MATLAB)
        cmd += '-r "dbstop if error; '
        cmd += 'voc_eval(\'{:s}\',\'{:s}\',\'{:s}\',\'{:s}\',{:d}); quit;"' \
            .format(self._devkit_path, comp_id,
                    self._image_set, output_dir, int(rm_results))
        print('Running:\n{}'.format(cmd))
        status = subprocess.call(cmd, shell=True)

    def evaluate_detections(self, all_boxes, output_dir):
        comp_id = self._write_voc_results_file(all_boxes)
        self._do_matlab_eval(comp_id, output_dir)

    def competition_mode(self, on):
        if on:
            self.config['use_salt'] = False
            self.config['cleanup'] = False
        else:
            self.config['use_salt'] = True
            self.config['cleanup'] = True


if __name__ == '__main__':
    d = datasets.pascal_voc('trainval', '2007')
    res = d.roidb
    from IPython import embed;

    embed()
